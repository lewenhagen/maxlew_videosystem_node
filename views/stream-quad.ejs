<!DOCTYPE html>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      overflow: hidden;
    }

    .grid-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      grid-template-rows: 1fr 1fr;
      width: 100vw;
      height: 100vh;
    }

    .cell {
      width: 100%;
      height: 100%;
      overflow: hidden;
    }

    .cell img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      background-color: black;
      display: block;
    }

  </style>
<body>

  <div class="grid-container">
    <div class="cell" id="one"><img id="1" class=" camera-feed" alt="Cam feed 1" src=""/> </div>
    <div class="cell" id="two"><img id="2" class=" camera-feed" alt="Cam feed 2" src=""/> </div>
    <div class="cell" id="three"><img id="3" class=" camera-feed" alt="Cam feed 3" src=""/></div>
    <div class="cell" id="four"><img id="4" class=" camera-feed" alt="Cam feed 4" src=""/></div>
  </div>
  <script type="module">
    const delay = parseInt('<%= delay %>', 10);
    const delta = parseInt('<%= delta %>', 10);
    const urlBase = 'http://localhost:3000/stream';

    // Max delay (seconds)
    const MAX_DELAY = 36;

    // Elements representing camera feeds
    const elements = [
      document.getElementById("1"),
      document.getElementById("2"),
      document.getElementById("3"),
      document.getElementById("4"),
    ];

    // Precompute delays per element, capped at MAX_DELAY
    const delays = [
      Math.min(delay, MAX_DELAY),
      Math.min(delay + delta, MAX_DELAY),
      Math.min(delay + delta * 2, MAX_DELAY),
      Math.min(delay + delta * 3, MAX_DELAY),
    ];

    // Cache hourglass URLs for each delay and number
    const hourglassCache = {};
    for (let d = 1; d <= MAX_DELAY; d++) {
      hourglassCache[d] = `img/hourglass/${d}.jpg`;
    }

    // Cache previous src per element to avoid redundant assignments
    const previousSrc = new Array(elements.length).fill(null);

    // Utility: sleep function for delay
    const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

    async function updateStreams() {
      // Calculate the max delay to know how long the whole loop runs
      const maxDuration = Math.max(...delays);

      for (let i = 0; i <= maxDuration; i++) {
        elements.forEach((el, idx) => {
          if (!el) {
            console.error(`Element with ID ${idx + 1} not found!`);
            return;
          }

          const currentDelay = delays[idx];

          let newSrc;
          if (i < currentDelay) {
            // Show hourglass countdown image
            const remaining = currentDelay - i;
            newSrc = hourglassCache[remaining];
          } else {
            // Show live stream URL
            newSrc = `${urlBase}/stream${idx + 1}/${currentDelay}`;
          }

          // Only update src if different to avoid unnecessary reloads
          if (previousSrc[idx] !== newSrc) {
            el.src = newSrc;
            previousSrc[idx] = newSrc;
          }
        });

        // Wait 1 second before next tick
        await sleep(1000);
      }
    }

    // Start the update loop
    updateStreams();

    // Keydown event listener for "+" key
    document.addEventListener("keydown", (event) => {
      if (event.key === "+") {
        window.location.replace("/", true);
      }
    });
  </script>

</body>
