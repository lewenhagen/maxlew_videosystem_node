<!DOCTYPE html>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
    }

    .dual {
      height: 100%;
      width: 50%;
      position: fixed;
      z-index: 1;
      top: 0;
      overflow-x: hidden;
      background-size: cover;
      background-repeat: no-repeat;
      background-position: center center;
    }

    .left {
      left: 0;
      object-fit: cover;
    }

    .right {
      object-fit: cover;
      right: 0;
    }


  </style>
<body>
  <div class="container">
    <img id="1" class="dual left" alt="Cam feed 1" src=""/>
    <img id="2" class="dual right" alt="Cam feed 2" src=""/>
  </div>
  <script type="module">
    async function updateStreams() {
      const maxDelay = 36;
      const leftCamDelay = parseInt('<%= left.delay %>', 10);
      const rightCamDelay = parseInt('<%= right.delay %>', 10);

      // Clamp delays
      const delays = [
        Math.min(leftCamDelay, maxDelay),
        Math.min(rightCamDelay, maxDelay),
      ];

      const elements = [
        document.getElementById("1"),
        document.getElementById("2"),
      ];

      // Validate elements presence
      elements.forEach((el, idx) => {
        if (!el) {
          console.error(`Element with ID ${idx + 1} not found!`);
        }
      });

      // Pre-cache hourglass URLs
      const hourglassCache = {};
      for (let d = 1; d <= maxDelay; d++) {
        hourglassCache[d] = `img/hourglass/${d}.jpg`;
      }

      // Cache previous src to avoid redundant updates
      const previousSrc = new Array(elements.length).fill(null);

      const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

      const maxIterations = Math.max(...delays);

      for (let i = 0; i <= maxIterations; i++) {
        elements.forEach((el, idx) => {
          if (!el) return;

          const currentDelay = delays[idx];
          let newSrc;

          if (i < currentDelay) {
            newSrc = hourglassCache[currentDelay - i];
          } else {
            newSrc = `http://localhost:3000/stream/stream${idx + 1}/${currentDelay}`;
          }

          if (previousSrc[idx] !== newSrc) {
            el.src = newSrc;
            previousSrc[idx] = newSrc;
          }
        });

        await sleep(1000);
      }
    }

    await updateStreams();

    document.addEventListener("keydown", (event) => {
      if (event.key === "+") {
        window.location.replace("/", true);
      }
    });
  </script>

</body>
